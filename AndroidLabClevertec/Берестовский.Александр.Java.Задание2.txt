package org.example.task2;

import java.util.ArrayList;

public abstract class Transport {
    private int transportId;
    private int yearOfRelease;
    private String manufacturer;
    private FuelSupply fuel;
    private int fuelConsumption;
    private int tasksDone;

    private int tripsAfterRepair;
    private int tripsAfterRefuel;
    private ArrayList<Order> orders;

    private static int counter = 0;

    public Transport(int yearOfRelease, String manufacturer, FuelSupply fuel, int fuelConsumption) {
        this.yearOfRelease = yearOfRelease;
        this.manufacturer = manufacturer;
        this.fuel = fuel;
        this.fuelConsumption = fuelConsumption;
        this.tasksDone = 0;
        this.tripsAfterRepair = 0;
        this.tripsAfterRefuel = 0;
        this.orders = new ArrayList<>();
        this.transportId = counter++;
    }

    @Override
    public String toString() {
        return "transportId=" + transportId +
                ", yearOfRelease=" + yearOfRelease +
                ", manufacturer='" + manufacturer + '\'' +
                ", fuel=" + fuel +
                ", fuelConsumption=" + fuelConsumption +
                ", tasksDone=" + tasksDone;
    }

    public ArrayList<Order> getOrders() {
        return orders;
    }

    public FuelSupply getFuel() {
        return fuel;
    }

    public int getFuelConsumption() {
        return fuelConsumption;
    }

    public int getTripsAfterRepair() {
        return tripsAfterRepair;
    }

    public void setTripsAfterRepair(int tripsAfterRepair) {
        this.tripsAfterRepair = tripsAfterRepair;
    }

    public int getTripsAfterRefuel() {
        return tripsAfterRefuel;
    }

    public void setTripsAfterRefuel(int tripsAfterRefuel) {
        this.tripsAfterRefuel = tripsAfterRefuel;
    }

    public void setOrders(ArrayList<Order> orders) {
        this.orders = orders;
    }

    public abstract void refuel();

    public abstract void repair();

    public abstract boolean isReadyForWork();

    public abstract void goWork();

    public abstract void doOrder(Order order);

    public abstract boolean loadOrder(Order order);

    public void resetAllOrders() {
        for (Order order :
                this.orders) {
            this.orders.remove(order);
        }
    }

    public void listOfAllOrders() {
        for (Order order :
                this.orders) {
            System.out.println(order);
        }
    }

    public void deleteCompletedOrders() {
        ArrayList<Order> temp = new ArrayList<>();
        for (Order order :
                this.orders) {
            if (!order.isDone()) {
                temp.add(order);
            }
        }
        setOrders(temp);
    }

    public void removeOneOrder(Order order) {
        if (orders.remove(order)) {
            System.out.println("Order id = " + order.getId() + " successfully removed");

            if (this instanceof CargoTransport) {
                ((CargoTransport) this).setOccupiedCapacity(((CargoTransport) this).getOccupiedCapacity() + order.getWeight());
                ((CargoTransport) this).setOccupiedVolume(((CargoTransport) this).getOccupiedVolume() + order.getVolume());
            } else {
                if (this instanceof PassengerTransport) {
                    ((PassengerTransport) this).setCurrentCapacity(((PassengerTransport) this).getCurrentCapacity() + order.getNumberOfPassengers());
                } else {
                    ((CombinedTransport) this).setOccupiedCapacity(((CombinedTransport) this).getOccupiedCapacity() + order.getWeight());
                    ((CombinedTransport) this).setOccupiedVolume(((CombinedTransport) this).getOccupiedVolume() + order.getVolume());
                    ((CombinedTransport) this).setCurrentCapacity(((CombinedTransport) this).getCurrentCapacity() + order.getNumberOfPassengers());
                }
            }
        } else {
            System.out.println("This order wasn't loaded");
        }
    }
}

//_________________________

package org.example.task2;

import java.util.ArrayList;

public class CargoTransport extends Transport {
    private static final int TRIPS_BEFORE_REPAIR = 10;
    private static final int TRIPS_BEFORE_WASH = 1;
    public static final int TRIPS_BEFORE_REFUEL = 2;
    public static final int COST_OF_REPAIR = 2500;
    public static final int COST_OF_WASH = 380;

    private int volumeOfTrunk;
    private int occupiedVolume;
    private int loadCapacity;
    private int occupiedCapacity;
    private TrunkType trunkType;
    private int tripsAfterWash;

    public CargoTransport(int yearOfRelease, String manufacturer, FuelSupply fuel,
                          int fuelConsumption, int volumeOfTrunk,
                          int loadCapacity, TrunkType trunkType) {
        super(yearOfRelease, manufacturer, fuel, fuelConsumption);
        this.volumeOfTrunk = volumeOfTrunk;
        this.occupiedVolume = 0;
        this.loadCapacity = loadCapacity;
        this.occupiedCapacity = 0;
        this.trunkType = trunkType;
        this.tripsAfterWash = 0;
    }

    @Override
    public String toString() {
        return "CargoTransport{" + super.toString() +
                ", volumeOfTrunk=" + volumeOfTrunk +
                ", occupiedVolume=" + occupiedVolume +
                ", loadCapacity=" + loadCapacity +
                ", occupiedCapacity=" + occupiedCapacity +
                ", trunkType=" + trunkType +
                "}\n";
    }

    public int getOccupiedVolume() {
        return occupiedVolume;
    }

    public void setOccupiedVolume(int occupiedVolume) {
        this.occupiedVolume = occupiedVolume;
    }

    public int getOccupiedCapacity() {
        return occupiedCapacity;
    }

    public void setOccupiedCapacity(int occupiedCapacity) {
        this.occupiedCapacity = occupiedCapacity;
    }

    @Override
    public void refuel() {
        System.out.println("Cargo transport is getting refueled");
        Park.expenses += FuelSupply.getCostPerLiter(getFuel()) * getFuelConsumption();
        setTripsAfterRefuel(0);
        Utils.sleep(2);
    }

    @Override
    public void repair() {
        System.out.println("Cargo transport is getting repaired");
        Park.expenses += COST_OF_REPAIR;
        setTripsAfterRepair(0);
        Utils.sleep(3);
    }

    public void wash() {
        System.out.println("Cargo transport is getting washed");
        Park.expenses += COST_OF_WASH;
        tripsAfterWash = 0;
        Utils.sleep(1);
    }

    @Override
    public boolean isReadyForWork() { //реализовать тут
        if (getTripsAfterRepair() < TRIPS_BEFORE_REPAIR || tripsAfterWash < TRIPS_BEFORE_WASH || getTripsAfterRefuel() < TRIPS_BEFORE_REFUEL) {
            return false;
        } else {
            return true;
        }
    }

    @Override
    public void goWork() {
        if (getOrders() != null) {
            for (Order order : getOrders()) {
                if (this.isReadyForWork()) {
                    doOrder(order);
                } else {
                    if (getTripsAfterRepair() == TRIPS_BEFORE_REPAIR) {
                        repair();
                    }
                    if (tripsAfterWash == TRIPS_BEFORE_WASH) {
                        wash();
                    }
                    if (getTripsAfterRefuel() == TRIPS_BEFORE_REFUEL) {
                        refuel();
                    }
                    doOrder(order);
                }
            }
            deleteCompletedOrders();
        }
        System.out.println("Cargo transport ended working");
    }

    @Override
    public void doOrder(Order order) {
        ArrayList<Order> temp;

        occupiedVolume += order.getVolume();
        occupiedCapacity += order.getWeight();
        setTripsAfterRepair(getTripsAfterRepair() + 1);
        setTripsAfterRefuel(getTripsAfterRefuel() + 1);
        tripsAfterWash++;

        Park.profit += order.getCostOfOrder();

        order.setDone(true);

        Utils.sleep(2);
    }

    @Override
    public boolean loadOrder(Order order) {
        if (TrunkType.getOrderType(trunkType).contains(order.getOrderType()) &&
                (order.getWeight() < loadCapacity - occupiedCapacity) &&
                (order.getVolume() < volumeOfTrunk - occupiedVolume)) {

            ArrayList<Order> temp = new ArrayList<>();
            temp = getOrders();
            temp.add(order);
            setOrders(temp);

            order.setTransport(this);

            occupiedVolume += order.getVolume();
            occupiedCapacity += order.getWeight();

            System.out.println("Order to cargo transport added");
            return true;
        } else {
            System.out.println("This order does not meet the requirements");
            return false;
        }
    }

    public int getEmptySpace() {
        return this.loadCapacity - this.occupiedCapacity;
    }

    public int getEmptyVolume() {
        return this.volumeOfTrunk - this.occupiedVolume;
    }
}

//_________________________

package org.example.task2;

import java.util.ArrayList;

public class PassengerTransport extends Transport {
    public static final int TRIPS_BEFORE_DISINFECTION = 2;
    private static final int TRIPS_BEFORE_REPAIR = 8;
    public static final int TRIPS_BEFORE_REFUEL = 3;
    public static final int COST_OF_DISINFECTION = 30;
    public static final int COST_OF_REPAIR = 2100;

    private int passengerCapacity;
    private int currentCapacity;
    private int tripsAfterDisinfection;

    public PassengerTransport(int yearOfRelease, String manufacturer, FuelSupply fuel,
                              int fuelConsumption, int passengerCapacity) {
        super(yearOfRelease, manufacturer, fuel, fuelConsumption);
        this.passengerCapacity = passengerCapacity;
        this.currentCapacity = 0;
        this.tripsAfterDisinfection = 0;
    }

    @Override
    public String toString() {
        return "PassengerTransport{" + super.toString() +
                ", passengerCapacity=" + passengerCapacity +
                ", currentCapacity=" + currentCapacity +
                "}\n";
    }

    public int getCurrentCapacity() {
        return currentCapacity;
    }

    public void setCurrentCapacity(int currentCapacity) {
        this.currentCapacity = currentCapacity;
    }

    @Override
    public void refuel() {
        System.out.println("Passenger transport is getting refueled");
        Park.expenses += FuelSupply.getCostPerLiter(getFuel()) * getFuelConsumption();
        setTripsAfterRefuel(0);
        Utils.sleep(2);
    }

    @Override
    public void repair() {
        System.out.println("Passenger transport is getting repaired");
        Park.expenses += COST_OF_REPAIR;
        setTripsAfterRepair(0);
        Utils.sleep(3);
    }

    public void disinfectTransport() {
        System.out.println("Passenger transport is getting disinfect");
        Park.expenses += COST_OF_DISINFECTION;
        tripsAfterDisinfection = 0;
        Utils.sleep(1);
    }

    @Override
    public boolean isReadyForWork() { //реализовать тут
        if (getTripsAfterRepair() < TRIPS_BEFORE_REPAIR || tripsAfterDisinfection < TRIPS_BEFORE_DISINFECTION || getTripsAfterRefuel() < TRIPS_BEFORE_REFUEL) {
            return false;
        } else {
            return true;
        }
    }

    @Override
    public void goWork() {
        if (getOrders() != null) {
            for (Order order : getOrders()) {
                if (this.isReadyForWork()) {
                    doOrder(order);
                } else {
                    if (getTripsAfterRepair() == TRIPS_BEFORE_REPAIR) {
                        repair();
                    }
                    if (tripsAfterDisinfection == TRIPS_BEFORE_DISINFECTION) {
                        disinfectTransport();
                    }
                    if (getTripsAfterRefuel() == TRIPS_BEFORE_REFUEL) {
                        refuel();
                    }
                    doOrder(order);
                }
            }
            deleteCompletedOrders();
        }
        System.out.println("Passenger transport ended working");
    }

    @Override
    public void doOrder(Order order) {
        ArrayList<Order> temp;

        currentCapacity += order.getNumberOfPassengers();
        setTripsAfterRepair(getTripsAfterRepair() + 1);
        setTripsAfterRefuel(getTripsAfterRefuel() + 1);
        tripsAfterDisinfection++;

        Park.profit += order.getCostOfOrder();

        order.setDone(true);

        Utils.sleep(2);
    }

    @Override
    public boolean loadOrder(Order order) {
        if (order.getNumberOfPassengers() < passengerCapacity - currentCapacity) {

            ArrayList<Order> temp;
            temp = getOrders();
            temp.add(order);
            setOrders(temp);

            order.setTransport(this);

            currentCapacity += order.getNumberOfPassengers();

            System.out.println("Order to passenger transport added");
            return true;
        } else {
            System.out.println("This order does not meet the requirements");
            return false;
        }
    }

    public int numberOfAvailableSeats() {
        return this.passengerCapacity - this.currentCapacity;
    }
}

//_________________________

package org.example.task2;

import java.util.ArrayList;

public class CombinedTransport extends Transport {
    public static final int COST_OF_TECHNICAL_INSPECTION = 400;
    public static final int TRIPS_BEFORE_INSPECTION = 6;
    private static final int TRIPS_BEFORE_REPAIR = 8;
    public static final int TRIPS_BEFORE_REFUEL = 3;
    public static final int COST_OF_REPAIR = 2100;

    private int volumeOfTrunk;
    private int occupiedVolume;
    private int loadCapacity;
    private int occupiedCapacity;
    private TrunkType trunkType;
    private int passengerCapacity;
    private int currentCapacity;
    private int tripsAfterInspection;

    public CombinedTransport(int yearOfRelease, String manufacturer, FuelSupply fuel,
                             int fuelConsumption, int volumeOfTrunk, int loadCapacity,
                             int passengerCapacity, TrunkType trunkType) {
        super(yearOfRelease, manufacturer, fuel, fuelConsumption);
        this.volumeOfTrunk = volumeOfTrunk;
        this.occupiedVolume = 0;
        this.loadCapacity = loadCapacity;
        this.occupiedCapacity = 0;
        this.trunkType = trunkType;
        this.passengerCapacity = passengerCapacity;
        this.currentCapacity = 0;
        this.tripsAfterInspection = 0;
    }

    public int getOccupiedVolume() {
        return occupiedVolume;
    }

    public void setOccupiedVolume(int occupiedVolume) {
        this.occupiedVolume = occupiedVolume;
    }

    public int getOccupiedCapacity() {
        return occupiedCapacity;
    }

    public void setOccupiedCapacity(int occupiedCapacity) {
        this.occupiedCapacity = occupiedCapacity;
    }

    public int getCurrentCapacity() {
        return currentCapacity;
    }

    public void setCurrentCapacity(int currentCapacity) {
        this.currentCapacity = currentCapacity;
    }

    @Override
    public String toString() {
        return "CombinedTransport{" + super.toString() +
                ", volumeOfTrunk=" + volumeOfTrunk +
                ", occupiedVolume=" + occupiedVolume +
                ", loadCapacity=" + loadCapacity +
                ", occupiedCapacity=" + occupiedCapacity +
                ", trunkType=" + trunkType +
                ", passengerCapacity=" + passengerCapacity +
                ", currentCapacity=" + currentCapacity +
                "}\n";
    }

    @Override
    public void refuel() {
        System.out.println("Combined transport is getting refueled");
        Park.expenses += FuelSupply.getCostPerLiter(getFuel()) * getFuelConsumption();
        setTripsAfterRefuel(0);
        Utils.sleep(2);
    }

    @Override
    public void repair() {
        System.out.println("Combined transport is getting repaired");
        Park.expenses += COST_OF_REPAIR;
        setTripsAfterRepair(0);
        Utils.sleep(3);
    }

    public void technicalInspection() {
        System.out.println("Combined transport is getting technical inspection");
        Park.expenses += COST_OF_TECHNICAL_INSPECTION;
        tripsAfterInspection = 0;
        Utils.sleep(2);
    }

    @Override
    public boolean isReadyForWork() {
        if (getTripsAfterRepair() < TRIPS_BEFORE_REPAIR || tripsAfterInspection < TRIPS_BEFORE_INSPECTION || getTripsAfterRefuel() < TRIPS_BEFORE_REFUEL) {
            return false;
        } else {
            return true;
        }
    }

    @Override
    public void goWork() {
        if (getOrders() != null) {
            for (Order order : getOrders()) {
                if (this.isReadyForWork()) {
                    doOrder(order);
                } else {
                    if (getTripsAfterRepair() == TRIPS_BEFORE_REPAIR) {
                        repair();
                    }
                    if (tripsAfterInspection == TRIPS_BEFORE_INSPECTION) {
                        technicalInspection();
                    }
                    if (getTripsAfterRefuel() == TRIPS_BEFORE_REFUEL) {
                        refuel();
                    }
                    doOrder(order);
                }
            }
            deleteCompletedOrders();
        }
        System.out.println("Combined transport ended working");
    }

    @Override
    public void doOrder(Order order) {
        ArrayList<Order> temp;

        occupiedVolume += order.getVolume();
        occupiedCapacity += order.getWeight();
        currentCapacity += order.getNumberOfPassengers();
        setTripsAfterRepair(getTripsAfterRepair() + 1);
        setTripsAfterRefuel(getTripsAfterRefuel() + 1);
        tripsAfterInspection++;

        Park.profit += order.getCostOfOrder();

        order.setDone(true);

        Utils.sleep(2);
    }

    @Override
    public boolean loadOrder(Order order) {
        if (order.getOrderType() != null) {
            return loadCargoOrder(order);
        } else {
            return loadPassengerOrder(order);
        }
    }

    public boolean loadCargoOrder(Order order) {
        if (TrunkType.getOrderType(trunkType).contains(order.getOrderType()) &&
                (order.getWeight() < loadCapacity - occupiedCapacity) &&
                (order.getVolume() < volumeOfTrunk - occupiedVolume)) {

            ArrayList<Order> temp;
            temp = getOrders();
            temp.add(order);
            setOrders(temp);

            order.setTransport(this);

            occupiedVolume += order.getVolume();
            occupiedCapacity += order.getWeight();

            System.out.println("Order to combined transport added");
            return true;
        } else {
            System.out.println("This order does not meet the requirements");
            return false;
        }
    }

    public boolean loadPassengerOrder(Order order) {
        if (order.getNumberOfPassengers() < passengerCapacity - currentCapacity) {

            ArrayList<Order> temp;
            temp = getOrders();
            temp.add(order);
            setOrders(temp);

            order.setTransport(this);

            currentCapacity += order.getNumberOfPassengers();

            System.out.println("Order to combined transport added");
            return true;
        } else {
            System.out.println("This order does not meet the requirements");
            return false;
        }
    }


    public int numberOfAvailableSeats() {
        return this.passengerCapacity - this.currentCapacity;
    }

    public int getEmptySpace() {
        return this.loadCapacity - this.occupiedCapacity;
    }

    public int getEmptyVolume() {
        return this.volumeOfTrunk - this.occupiedVolume;
    }
}

//_________________________

package org.example.task2;

import java.util.ArrayList;

public class Order {
    private String startingPoint;
    private String endingPoint;
    private int costOfOrder;
    private int id;
    private int volume;
    private int weight;
    private int numberOfPassengers;
    private OrderType orderType;
    private Transport transport;
    private boolean isDone;

    private static int counterId = 0;
    public static ArrayList<Order> allOrders = new ArrayList<>();

    public Order(String startingPoint, String endingPoint, int costOfOrder, int numberOfPassengers) {
        this.startingPoint = startingPoint;
        this.endingPoint = endingPoint;
        this.costOfOrder = costOfOrder;
        this.id = counterId++;
        this.numberOfPassengers = numberOfPassengers;
        this.transport = null;
        this.isDone = false;
        this.orderType = null;
        allOrders.add(this);
    }

    public Order(String startingPoint, String endingPoint, int costOfOrder,
                 int volume, int weight, OrderType orderType) {
        this.startingPoint = startingPoint;
        this.endingPoint = endingPoint;
        this.costOfOrder = costOfOrder;
        this.id = counterId++;
        this.volume = volume;
        this.weight = weight;
        this.orderType = orderType;
        this.transport = null;
        this.isDone = false;
        allOrders.add(this);
    }

    @Override
    public String toString() {
        return "Order{" +
                "isDone=" + isDone +
                ", startingPoint='" + startingPoint + '\'' +
                ", endingPoint='" + endingPoint + '\'' +
                ", costOfOrder=" + costOfOrder +
                ", id=" + id +
                ", volume=" + volume +
                ", weight=" + weight +
                ", numberOfPassengers=" + numberOfPassengers +
                ", orderType=" + orderType +
                ", transport=" + transport +
                ", isDone=" + isDone +
                '}';
    }

    public int getCostOfOrder() {
        return costOfOrder;
    }

    public void setDone(boolean done) {
        isDone = done;
    }

    public boolean isDone() {
        return isDone;
    }

    public int getVolume() {
        return volume;
    }

    public int getWeight() {
        return weight;
    }

    public int getNumberOfPassengers() {
        return numberOfPassengers;
    }

    public OrderType getOrderType() {
        return orderType;
    }

    public void setTransport(Transport transport) {
        this.transport = transport;
    }

    public int getId() {
        return id;
    }

    public static void viewAllOrders() {
        for (Order order :
                allOrders) {
            System.out.println(order);
        }
    }
}

//_________________________

package org.example.task2;

public enum FuelSupply {
    PETROL(30), DIESEL(23), GAS(28);

    private int costPerLiter;

    FuelSupply(int costPerLiter) {
        this.costPerLiter = costPerLiter;
    }

    public static int getCostPerLiter(FuelSupply fuelSupply) {
        return fuelSupply.costPerLiter;
    }
}

//_________________________

package org.example.task2;

public enum OrderType {
    MANUFACTURED_GOODS, FOOD, LIQUID;
}

//_________________________

package org.example.task2;

import java.util.Arrays;
import java.util.List;

public enum TrunkType {
    AWNING_TRUNK(List.of(OrderType.MANUFACTURED_GOODS)),
    REFRIGERATOR(List.of(OrderType.MANUFACTURED_GOODS, OrderType.FOOD)),
    TANK(List.of(OrderType.LIQUID));

    private List<OrderType> orderType;

    TrunkType(List<OrderType> orderType) {
        this.orderType = orderType;
    }

    public static List<OrderType> getOrderType(TrunkType trunkType) {
        return trunkType.orderType;
    }
}

//_________________________

package org.example.task2;

public class Utils {
    public static void sleep(int seconds) {
        try {
            Thread.sleep(seconds * 1000L);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }
}

//_________________________

package org.example.task2;

import java.util.ArrayList;
import java.util.List;

public class Park {
    public static int profit = 0;
    public static int expenses = 0;
    public static List<Transport> transports = new ArrayList<>();

    public static void startWork() {
        System.out.println("All transport working:\n" + transports.toString());

        for (Transport machine :
                transports) {
            machine.goWork();
        }
    }

}

//Описание работы и функционала_________________________

package org.example.task2;

public class Main {
    public static void main(String[] args) {
        CombinedTransport travelBus = new CombinedTransport(1998, "BMW", FuelSupply.GAS, 9, 100, 150, 200, TrunkType.AWNING_TRUNK);
        PassengerTransport bus = new PassengerTransport(2010, "Audi", FuelSupply.PETROL, 7, 110);
        CargoTransport truck = new CargoTransport(2005, "Volvo", FuelSupply.DIESEL, 5, 120, 200, TrunkType.REFRIGERATOR);

        Park.transports.add(bus);
        Park.transports.add(truck);
        Park.transports.add(travelBus);

        Order order1 = new Order("Minsk", "Warsaw", 1500, 10, 15, OrderType.FOOD);
        Order order2 = new Order("Saint-Petersburg", "Berlin", 890, 10, 15, OrderType.MANUFACTURED_GOODS);
        Order order3 = new Order("Beijing", "Hong Kong", 1000, 10, 15, OrderType.LIQUID);
        Order order4 = new Order("Vancouver", "Washington DC", 2500, 10, 15, OrderType.FOOD);

        truck.refuel();
        truck.loadOrder(order1);
        System.out.println("Empty space in cargo transport: " + truck.getEmptySpace());
        truck.loadOrder(order2);
        System.out.println("Empty volume in cargo transport: " + truck.getEmptyVolume());
        truck.loadOrder(order3);
        truck.loadOrder(order4);
        truck.removeOneOrder(order2);

        truck.listOfAllOrders();

        Order order5 = new Order("Minsk", "Brest", 400, 55);
        Order order6 = new Order("Gomel", "Grodno", 450, 40);
        Order order7 = new Order("Vitebsk", "Mogilev", 200, 30);

        bus.repair();
        bus.loadOrder(order5);
        bus.loadOrder(order6);
        System.out.println("Available seats: " + bus.numberOfAvailableSeats());
        bus.loadOrder(order7);

        bus.listOfAllOrders();

        Order order8 = new Order("Minsk", "Brest", 400, 55);
        Order order9 = new Order("Riga", "Vilnius", 600, 90, 90, OrderType.MANUFACTURED_GOODS);
        Order order10 = new Order("Vitebsk", "Mogilev", 200, 30);

        travelBus.technicalInspection();
        System.out.println("Empty seats in travel bus: " + travelBus.numberOfAvailableSeats());
        travelBus.loadOrder(order8);
        System.out.println("Empty space in travel bus: " + travelBus.getEmptySpace());
        travelBus.loadOrder(order9);
        System.out.println("Empty volume in travel bus: " + travelBus.getEmptyVolume());
        travelBus.loadOrder(order10);

        Park.startWork();

        System.out.println("Profit: " + Park.profit);
        System.out.println("Expenses: " + Park.expenses);

        Order.viewAllOrders();

    }
}
